                            | # Execution begins at address 0 
0x0:                        | 	.pos 0 
0x0: 30f40001000000000000   | 	irmovq stack, %rsp  	# Set up stack pointer  
0xa: 803800000000000000     | 	call main		# Execute main program
0x13: 00                    | 	halt			# Terminate program 
                            | 
                            | # Array of 4 elements
0x18:                       | 	.align 8 	
0x18: 0d000d000d000000      | array:	.quad 0x000d000d000d
0x20: c000c000c0000000      | 	.quad 0x00c000c000c0
0x28: 000b000b000b0000      | 	.quad 0x0b000b000b00
0x30: 00a000a000a00000      | 	.quad 0xa000a000a000
                            | 
0x38: 30f71800000000000000  | main:	irmovq array,%rdi	
0x42: 30f60400000000000000  | 	irmovq $4,%rsi
0x4c: 805600000000000000    | 	call sum		# sum(array, 4)
0x55: 90                    | 	ret 
                            | 
                            | /* $begin sumi-ys */
                            | # long sum(long *start, long count)
                            | # start in %rdi, count in %rsi
0x56:                       | sum:
0x56: 6300                  | 	xorq %rax,%rax		# sum = 0
0x58: 6266                  | 	andq %rsi,%rsi		# Set condition codes
0x5a: 708300000000000000    | 	jmp    test
0x63:                       | loop:
0x63: 50a70000000000000000  | 	mrmovq (%rdi),%r10	# Get *start
0x6d: 60a0                  | 	addq %r10,%rax          # Add to sum
0x6f: c0f70800000000000000  | 	iaddq $8,%rdi           # start++
0x79: c0f6ffffffffffffffff  | 	iaddq $-1,%rsi          # count--
0x83:                       | test:
0x83: 746300000000000000    | 	jne    loop             # Stop when 0
0x8c: 90                    | 	ret
                            | /* $end sumi-ys */
                            | 
                            | # The stack starts here and grows to lower addresses
0x100:                      | 	.pos 0x100		
0x100:                      | stack:	 
