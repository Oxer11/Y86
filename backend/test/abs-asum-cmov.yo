                            | # Modification of asum code to compute absolute values of entries.
                            | # This version uses a conditional move
                            | # Execution begins at address 0 
0x0:                        | 	.pos 0 
0x0: 30f40002000000000000   | 	irmovq stack, %rsp  	# Set up stack pointer  
0xa: 803800000000000000     | 	call main		# Execute main program
0x13: 00                    | 	halt			# Terminate program 
                            | 
                            | # Array of 4 elements
0x18:                       | 	.align 8 	
0x18: 0d000d000d000000      | array:	.quad 0x0000000d000d000d
0x20: 40ff3fff3fffffff      | 	.quad 0xffffff3fff3fff40  # -0x000000c000c000c0
0x28: 000b000b000b0000      | 	.quad 0x00000b000b000b00
0x30: 0060ff5fff5fffff      | 	.quad 0xffff5fff5fff6000  # -0x0000a000a000a000  
                            | 
0x38:                       | main:
0x38: 30f71800000000000000  | 	irmovq array,%rdi	
0x42: 30f60400000000000000  | 	irmovq $4,%rsi
0x4c: 805600000000000000    | 	call absSum		# absSum(array, 4)
0x55: 90                    | 	ret 
                            | 
                            | # long absSum(long *start, long count)
                            | # start in %rdi, count in %rsi
0x56:                       | absSum:
0x56: 30f80800000000000000  | 	irmovq $8,%r8           # Constant 8
0x60: 30f90100000000000000  | 	irmovq $1,%r9	        # Constant 1
0x6a: 6300                  | 	xorq %rax,%rax		# sum = 0
0x6c: 6266                  | 	andq %rsi,%rsi		# Set condition codes
0x6e: 708d00000000000000    | 	jmp  test
                            | /* $begin abs-sum-cmov-ys */
0x77:                       | loop:
0x77: 50a70000000000000000  | 	mrmovq (%rdi),%r10	# x = *start
0x81: 63bb                  | 	xorq %r11,%r11          # Constant 0
0x83: 61ab                  | 	subq %r10,%r11		# -x
0x85: 26ba                  | 	cmovg %r11,%r10		# If -x > 0 then x = -x
0x87: 60a0                  | 	addq %r10,%rax          # Add to sum
0x89: 6087                  | 	addq %r8,%rdi           # start++
0x8b: 6196                  | 	subq %r9,%rsi           # count--
0x8d:                       | test:
0x8d: 747700000000000000    | 	jne    loop             # Stop when 0
                            | /* $end abs-sum-cmov-ys */
0x96: 90                    | 	ret
                            | 
                            | # The stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200		
0x200:                      | stack:	 
